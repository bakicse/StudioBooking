// <auto-generated />
using System;
using Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250727101504_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("CloseTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<TimeOnly>("OpenTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.HasKey("Id");

                    b.ToTable("Availability", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric(10, 8)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric(11, 8)");

                    b.HasKey("Id");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("Domain.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CoordinatesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatesId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Studio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amenities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("numeric(10, 2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric(2, 1)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("ContactId");

                    b.HasIndex("LocationId");

                    b.ToTable("Studio", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Booking", b =>
                {
                    b.HasOne("Domain.Models.Studio", "Studio")
                        .WithMany("Bookings")
                        .HasForeignKey("StudioId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Studio");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("Domain.Models.Location", b =>
                {
                    b.HasOne("Domain.Models.Coordinate", "Coordinates")
                        .WithMany("Locations")
                        .HasForeignKey("CoordinatesId")
                        .HasConstraintName("FK_Location_Coordinates");

                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("Domain.Models.Studio", b =>
                {
                    b.HasOne("Domain.Models.Availability", "Availability")
                        .WithMany("Studios")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("FK_Studio_Availability");

                    b.HasOne("Domain.Models.Contact", "Contact")
                        .WithMany("Studios")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_Studio_Contact");

                    b.HasOne("Domain.Models.Location", "Location")
                        .WithMany("Studios")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Studio_Location");

                    b.Navigation("Availability");

                    b.Navigation("Contact");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Models.Availability", b =>
                {
                    b.Navigation("Studios");
                });

            modelBuilder.Entity("Domain.Models.Contact", b =>
                {
                    b.Navigation("Studios");
                });

            modelBuilder.Entity("Domain.Models.Coordinate", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Domain.Models.Location", b =>
                {
                    b.Navigation("Studios");
                });

            modelBuilder.Entity("Domain.Models.Studio", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
